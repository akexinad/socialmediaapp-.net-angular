.NET COMMAND LINE NOTES
=======================

> dotnet -h
- Provides a list of all your commands.

> dotnet new -h
- Contextual help for all the different types of projects we can build.

> dotnet new webapi -h
- help on this particular type of app.

- Creating the app
> dotnet new webapi -o DatingApp.API -n DatingApp.API

> dotnet watch run
- Launches the kestrel web server and starts up the application.




NOTES ON LOGGING INFO
=====================

- The appsettings.development.json file determines what gets logged to your terminal when your in development and  appsettings.json determines what is logged in other environments.




DATABASE NOTES
==============

- We are going to take the "Code First" approach.
    - This means that we create our class models first, that represent the objects that directly relate to tables in our database.





ENTITYFRAMEWORK NOTES
=====================

- When you create a Model/Entity, you need to let EntityFramework know bout its existence.
- This happens in the DataContext file.

- Then your application needs to know about this DataContext.
- This happens in our Startup.cs file.

- Use the nugetpackage manager to install sqlite.
- ctrl shift P > nuget package manager: add package > Microsoft.EntityFrameworkCore.Sqlite > pick the latest version.
- It should be added to your .csproj file.




CREATING THE DATABASE
=====================

- After you have completed the configuration settings in the appsettings.json file and the startup.cs file, run these commands:

> dotnet ef migration add InitialCreate
- It creates a migrations folder.

- NOTE: Remember to always check your migration file in the migrations folder to ensure that all necessary information is correct.

> dotnet ef database update
- This will update the databse with the latest migration as well as create the database if you havent done so.




EDITING CORS
============

- See startup.cs services and configure method where configurations are supplied.
- Once you have configured it to allow any, if you check your response headers in your network in your browser, you will see an * value for Access-Control-Allow-Origin in the 200 get request for values.




THE REPOSITORY PATTERN
======================

- We do not query the database itself. All the querying isd abstractedand executed by Entity Framework:

KESTREL --> CONRTOLLER --> DB CONTEXT --> ENTITY FRAMEWORK --> SQL DATABASE

- The repository pattern adds a further layer of abstraction.
- This takes out the methods querying the database out of the controllers and into the repository.

- MICROSOFT DEF.N OF A REPOSITORY: The repository mediates between the data source layer and the 
business layers of the application. It queries the data source for the data, maps the data 
from the data source to a business entity and persists changes in the business entity to the data
source. A repository separates the business logic from the interactions with the underlying 
data source or Web service.

CONTROLLER --> REPOSITORY INTERFACE --> REPOSITORY IMPLEMENTATION --> DB QUERY

WHY USE THE REPO PATTERN???

- Minimizes duplicate query logic.
- Decouples the application from the persistence framework.
- All db queries in the same place.
- Promotes testability.

- The repository interface is found in the Data folder and is in the form of an interface.
- You the use the interface to create the actual repository. This is where the data querying will happen.




REGISTERING SERVICES IN THE STARTUP CLASS
=========================================

- The order of the servies in the startup.cs file is only important in the Configure() method, not the ConfigureServices() method.

- There are a number of options:
    - AddSingleton() => creates a single instance of the Auth repository. It can cause problems when handling concurrent requests.
    - AddTransient() => creates a new instance of that repository everytime that repository is requested by the client. Great for light-weight stateless services.
    - AddScoped() => Creates a new instance of the repository within each scoped request. That, it creates a new repository for each respective web request, but uses the same repository for each respective request.